{"ast":null,"code":"var _jsxFileName = \"/Users/haydenleachman/Desktop/Wes/Comp333/hw3/ftest/src/App.js\";\nimport React from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\"; // We are creating a class component for our todo list and individual todo list\n// items.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // The state object is initialized in the constructor of the component.\n    // It has three properties: viewCompleted, activeItem, and todoList.\n\n    this.refreshList = () => {\n      // We are using the axios library for making HTTP requests.\n      // Here is a GET request to our api/todos path.\n      // If it succeeds, we set the todoList to the resolved data.\n      // Otherwise, we catch the error and print it to the console.\n      // You can test these requests to your API using Postman.\n      // We are using async calls here. Refer to the JavaScript\n      // tutorial for how they work.\n      axios.get(\"http://localhost:8000/api/todos/\").then(res => this.setState({\n        todoList: res.data\n      })).catch(err => console.log(err));\n    };\n\n    this.displayCompleted = status => {\n      if (status) {\n        // To change a value in the state object, use the this.setState() method.\n        // When a value in the state object changes, the component will re-render,\n        // meaning that the output will change according to the new value(s).\n        return this.setState({\n          viewCompleted: true\n        });\n      }\n\n      return this.setState({\n        viewCompleted: false\n      });\n    };\n\n    this.renderTabList = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tab-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => this.displayCompleted(true) // A ternary within curly braces in JSX.\n          // If the call to displayCompted returns viewCompleted as true,\n          // set the left, i.e., Complete view, to active.\n          ,\n          className: this.state.viewCompleted ? \"active\" : \"\",\n          children: \"Complete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          onClick: () => this.displayCompleted(false),\n          className: this.state.viewCompleted ? \"\" : \"active\",\n          children: \"Incomplete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.renderItems = () => {\n      // Destructuring assignment assigning viewCompleted = this.state.viewCompleted\n      const {\n        viewCompleted\n      } = this.state; // filter is a callback function that returns the elements of an array\n      // meeting a particular condition; here all items that are viewCompleted.\n\n      const newItems = this.state.todoList.filter(item => item.completed === viewCompleted); // The items are then mapped to their UI elements based on their id, i.e.,\n      // item.id, item.rating, and item.title.\n\n      return newItems.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"list-group-item d-flex justify-content-between align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: `todo-title mr-2 ${this.state.viewCompleted ? \"completed-todo\" : \"\"}`,\n          title: item.rating,\n          children: item.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.editItem(item),\n            className: \"btn btn-secondary mr-2\",\n            children: [\" \", \"Edit\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => this.handleDelete(item),\n            className: \"btn btn-danger\",\n            children: [\"Delete\", \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this)]\n      }, item.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }, this));\n    };\n\n    this.toggle = () => {\n      // We have a modal view below in the render() function.\n      // Upon toggle, set the modal to false, i.e., do not show the modal.\n      this.setState({\n        modal: !this.state.modal\n      });\n    };\n\n    this.handleSubmit = item => {\n      this.toggle(); // If the item already exists in our database, i.e., we have an id for our\n      // item, use a PUT request to modify it.\n\n      if (item.id) {\n        axios // Note that we are using backticks here instead of double quotes.\n        // Backticks are useful because they allow us to use dynamic variables,\n        // i.e., the item.id in this case. You can use this technique also\n        // for authentication tokens.\n        .put(`http://localhost:8000/api/todos/${item.id}/`, item).then(res => this.refreshList());\n        return;\n      } // If the item does not yet exist, use a POST request to write to the\n      // database.\n\n\n      axios.post(\"http://localhost:8000/api/todos/\", item).then(res => this.refreshList());\n    };\n\n    this.handleDelete = item => {\n      axios.delete(`http://localhost:8000/api/todos/${item.id}`).then(res => this.refreshList());\n    };\n\n    this.createItem = () => {\n      const item = {\n        title: \"\",\n        rating: \"\",\n        completed: false\n      };\n      this.setState({\n        activeItem: item,\n        modal: !this.state.modal\n      });\n    };\n\n    this.editItem = item => {\n      this.setState({\n        activeItem: item,\n        modal: !this.state.modal\n      });\n    };\n\n    this.state = {\n      viewCompleted: false,\n      activeItem: {\n        title: \"\",\n        rating: \"\",\n        completed: false\n      },\n      todoList: []\n    };\n  } // The `componentDidMount()` method is called after the component is rendered,\n  // at which point we call refreshList.\n\n\n  componentDidMount() {\n    this.refreshList();\n  } // You can also define your custom functions in components as below.\n  // We are using JavaScript arrow functions. There are no parameters () and\n  // the function body executes an HTTP request.\n\n\n  // The `render()` method is the only required method in a class component.\n  // When called, it will render the page. You do not have to specifically\n  // call render() in your component. Rather, the stub code with the\n  // ReactDOM.render(...) in your index.js will do that for you.\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"content\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white text-uppercase text-center my-4\",\n        children: \"Todo app\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row \",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col-md-6 col-sm-10 mx-auto p-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card p-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: this.createItem,\n                className: \"btn btn-primary\",\n                children: \"Add task\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 175,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 174,\n              columnNumber: 15\n            }, this), this.renderTabList(), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"list-group list-group-flush\",\n              children: this.renderItems()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), this.state.modal ? /*#__PURE__*/_jsxDEV(Modal, {\n        activeItem: this.state.activeItem,\n        toggle: this.toggle,\n        onSave: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }, this);\n  }\n\n} // Export our App so that it can be rendered in index.js.\n\n\nexport default App;","map":{"version":3,"sources":["/Users/haydenleachman/Desktop/Wes/Comp333/hw3/ftest/src/App.js"],"names":["React","Modal","axios","App","Component","constructor","props","refreshList","get","then","res","setState","todoList","data","catch","err","console","log","displayCompleted","status","viewCompleted","renderTabList","state","renderItems","newItems","filter","item","completed","map","rating","title","editItem","handleDelete","id","toggle","modal","handleSubmit","put","post","delete","createItem","activeItem","componentDidMount","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Modal from \"./components/Modal\";\nimport axios from \"axios\";\n\n// We are creating a class component for our todo list and individual todo list\n// items.\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // The state object is initialized in the constructor of the component.\n    // It has three properties: viewCompleted, activeItem, and todoList.\n    this.state = {\n      viewCompleted: false,\n      activeItem: {\n        title: \"\",\n        rating: \"\",\n        completed: false\n      },\n      todoList: []\n    };\n  }\n  // The `componentDidMount()` method is called after the component is rendered,\n  // at which point we call refreshList.\n  componentDidMount() {\n    this.refreshList();\n  }\n  // You can also define your custom functions in components as below.\n  // We are using JavaScript arrow functions. There are no parameters () and\n  // the function body executes an HTTP request.\n  refreshList = () => {\n    // We are using the axios library for making HTTP requests.\n    // Here is a GET request to our api/todos path.\n    // If it succeeds, we set the todoList to the resolved data.\n    // Otherwise, we catch the error and print it to the console.\n    // You can test these requests to your API using Postman.\n    // We are using async calls here. Refer to the JavaScript\n    // tutorial for how they work.\n    axios\n      .get(\"http://localhost:8000/api/todos/\")\n      .then(res => this.setState({ todoList: res.data }))\n      .catch(err => console.log(err));\n  };\n  displayCompleted = status => {\n    if (status) {\n      // To change a value in the state object, use the this.setState() method.\n      // When a value in the state object changes, the component will re-render,\n      // meaning that the output will change according to the new value(s).\n      return this.setState({ viewCompleted: true });\n    }\n    return this.setState({ viewCompleted: false });\n  };\n  // Function for switching between the Complete and Incomplete task views.\n  renderTabList = () => {\n    return (\n      <div className=\"tab-list\">\n        {/* Complete view active */}\n        <span\n          onClick={() => this.displayCompleted(true)}\n          // A ternary within curly braces in JSX.\n          // If the call to displayCompted returns viewCompleted as true,\n          // set the left, i.e., Complete view, to active.\n          className={this.state.viewCompleted ? \"active\" : \"\"}\n        >\n          Complete\n        </span>\n        {/* Incomplete view active. */}\n        <span\n          onClick={() => this.displayCompleted(false)}\n          className={this.state.viewCompleted ? \"\" : \"active\"}\n        >\n          Incomplete\n        </span>\n      </div>\n    );\n  };\n  // Function for managing the edit and delete views.\n  renderItems = () => {\n    // Destructuring assignment assigning viewCompleted = this.state.viewCompleted\n    const { viewCompleted } = this.state;\n    // filter is a callback function that returns the elements of an array\n    // meeting a particular condition; here all items that are viewCompleted.\n    const newItems = this.state.todoList.filter(\n      item => item.completed === viewCompleted\n    );\n    // The items are then mapped to their UI elements based on their id, i.e.,\n    // item.id, item.rating, and item.title.\n    return newItems.map(item => (\n      <li\n        key={item.id}\n        className=\"list-group-item d-flex justify-content-between align-items-center\"\n      >\n        <span\n          className={`todo-title mr-2 ${\n            this.state.viewCompleted ? \"completed-todo\" : \"\"\n          }`}\n          title={item.rating}\n        >\n          {item.title}\n        </span>\n        {/* UI for editing and deleting items and their respective events. */}\n        <span>\n          <button\n            onClick={() => this.editItem(item)}\n            className=\"btn btn-secondary mr-2\"\n          >\n            {\" \"}\n            Edit{\" \"}\n          </button>\n          <button\n            onClick={() => this.handleDelete(item)}\n            className=\"btn btn-danger\"\n          >\n            Delete{\" \"}\n          </button>\n        </span>\n      </li>\n    ));\n  };\n  // To change a value in the state object, use the this.setState() method.\n  // When a value in the state object changes, the component will re-render,\n  // meaning that the output will change according to the new value(s).\n  toggle = () => {\n    // We have a modal view below in the render() function.\n    // Upon toggle, set the modal to false, i.e., do not show the modal.\n    this.setState({ modal: !this.state.modal });\n  };\n  handleSubmit = item => {\n    this.toggle();\n    // If the item already exists in our database, i.e., we have an id for our\n    // item, use a PUT request to modify it.\n    if (item.id) {\n      axios\n        // Note that we are using backticks here instead of double quotes.\n        // Backticks are useful because they allow us to use dynamic variables,\n        // i.e., the item.id in this case. You can use this technique also\n        // for authentication tokens.\n        .put(`http://localhost:8000/api/todos/${item.id}/`, item)\n        .then(res => this.refreshList());\n      return;\n    }\n    // If the item does not yet exist, use a POST request to write to the\n    // database.\n    axios\n      .post(\"http://localhost:8000/api/todos/\", item)\n      .then(res => this.refreshList());\n  };\n  // If the user triggers a delete event, send a delete request.\n  handleDelete = item => {\n    axios\n      .delete(`http://localhost:8000/api/todos/${item.id}`)\n      .then(res => this.refreshList());\n  };\n  // If the user triggers a createItem event (by clicking on Add task), create\n  // a new item with default values and set the modal to false.\n  createItem = () => {\n    const item = { title: \"\", rating: \"\", completed: false };\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  // If the use triggers an editItem event.\n  editItem = item => {\n    this.setState({ activeItem: item, modal: !this.state.modal });\n  };\n  // The `render()` method is the only required method in a class component.\n  // When called, it will render the page. You do not have to specifically\n  // call render() in your component. Rather, the stub code with the\n  // ReactDOM.render(...) in your index.js will do that for you.\n  render() {\n    return (\n      <main className=\"content\">\n        <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\n        <div className=\"row \">\n          <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\n            <div className=\"card p-3\">\n              <div className=\"\">\n                <button onClick={this.createItem} className=\"btn btn-primary\">\n                  Add task\n                </button>\n              </div>\n              {this.renderTabList()}\n              <ul className=\"list-group list-group-flush\">\n                {this.renderItems()}\n              </ul>\n            </div>\n          </div>\n        </div>\n        {/* If the modal state is true, show the modal component. */}\n        {this.state.modal ? (\n          <Modal\n            activeItem={this.state.activeItem}\n            toggle={this.toggle}\n            onSave={this.handleSubmit}\n          />\n        ) : null}\n      </main>\n    );\n  }\n}\n\n// Export our App so that it can be rendered in index.js.\nexport default App;\n"]},"metadata":{},"sourceType":"module"}