{"ast":null,"code":"var _jsxFileName = \"/Users/haydenleachman/Desktop/Wes/Comp333/hw3_apps/hw3/frontend/src/components/Modal.js\";\nimport React from \"react\"; // We would like to use a modal (small window) to show details of a task.\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\"; // Let's create a component.\n// We are creating and exporting the CustomModal class. It is a class component.\n// It will be imported in our App.js.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CustomModal extends React.Component {\n  // The constructor function will be called when the component gets initialized.\n  // It is also the place where you initialize the component's properties,\n  // aka props (that is, function arguments in React-speak).\n  constructor(props) {\n    // `super()` allows us to inherit from the parent component's constructor.\n    // That will allow our component to access all built-in React functions, etc.\n    super(props); // React components have a built-in `state` object. The `state` object is where\n    // you store property values that belong to the component. When the state object\n    // changes, the component re-renders.\n    // The state object is initialized in the constructor.\n    // It can contain as many properties as you like.\n    // Here we define one property called activeItem.\n    // 'this' refers to the currently instantiated CustomModal.\n\n    this.handleChange = event => {\n      // An event has a target, and event.target gives us the event's DOM element, e.g., see further below\n      // <input name=\"description\" placeholder=\"Enter Todo description\" type=\"text\" class=\"form-control\" value=\"My Task\">.\n      // To refer to the description we assign the variable name = \"description\" and value = \"My Task\".\n      let {\n        name,\n        value\n      } = event.target;\n\n      if (event.target.type === \"checkbox\") {\n        value = event.target.checked;\n      } // Below we have the spread operator three dots ... . It works as follows:\n      // var parts = ['two', 'three']; // [two\", \"three\"]\n      // var numbers = ['one', ...parts, 'four']; // [\"one\", \"two\", \"three\", \"four\"]\n      // ...this.state.activeItem spreads out the current task object, e.g.,\n      // {\"id\": 3, \"title\": \"My Task\", \"description\": \"Wash Dishes\", \"completed\": true}.\n      // [name]: value sets the name of the task to the new value the user entered\n      // (e.g., title to \"Another Task\" or description to \"Sweep floor\").\n\n\n      const activeItem = { ...this.state.activeItem,\n        [name]: value\n      }; // To change a value in the `state` object for rendering, use the `setState()`\n      // method (on the current CustomModal instance referred to with `this`).\n      // If you would not do so, the text shown to the user in the textbox, e.g.,\n      // for the title of the new task would not change.\n\n      this.setState({\n        activeItem\n      });\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem\n    };\n  } // Whenver we enter changes into our form, e.g., for the title of our task,\n  // we want the change to be immediately detected. This is what happens when\n  // the handleChange function is called below with onChange={this.handleChange}.\n  // handleChange takes an event argument, i.e., a change in title, descripton,\n  // or checkbox.\n\n\n  // The `render()` method is the only required method in a class component.\n  // When called, it will render the page. You do not have to specifically\n  // call render() in your component. Rather, the stub code with the\n  // ReactDOM.render(...) in your index.js will do that for you.\n  // The following will render the modal for adding or editing a task.\n  render() {\n    // The modal has three properties: toggle, onSave, and activeItem.\n    // We have already defined activeItem above.\n    // See App.js on how toggle, onSave, and activeItem are being used.\n    const {\n      toggle,\n      onSave\n    } = this.props;\n    return (\n      /*#__PURE__*/\n      // isOpen={true} is a Boolean describing if the modal should be shown or not,\n      // i.e., in our case, what should happen if the modal is open.\n      // Open the modal on toggling/clicking. See the toggle function in App.js\n      // below.\n      _jsxDEV(Modal, {\n        isOpen: true,\n        toggle: toggle,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          toggle: toggle,\n          children: \" Todo Item \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                for: \"username\",\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"username\",\n                value: this.state.activeItem.title // \"this\" refers to the current event. If there is a change,\n                // it will be passed to the handleChange function above.\n                ,\n                onChange: this.handleChange,\n                placeholder: \"Enter Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                for: \"password\",\n                children: \"Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(Input, {\n                type: \"text\",\n                name: \"password\",\n                value: this.state.activeItem.description,\n                onChange: this.handleChange,\n                placeholder: \"Enter Password\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              check: true,\n              children: /*#__PURE__*/_jsxDEV(Label, {\n                for: \"completed\",\n                children: [/*#__PURE__*/_jsxDEV(Input, {\n                  type: \"checkbox\",\n                  name: \"completed\",\n                  checked: this.state.activeItem.completed,\n                  onChange: this.handleChange\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 108,\n                  columnNumber: 17\n                }, this), \"Completed\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"success\",\n            onClick: () => onSave(this.state.activeItem),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n}","map":{"version":3,"sources":["/Users/haydenleachman/Desktop/Wes/Comp333/hw3_apps/hw3/frontend/src/components/Modal.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Input","Label","CustomModal","Component","constructor","props","handleChange","event","name","value","target","type","checked","activeItem","state","setState","render","toggle","onSave","title","description","completed"],"mappings":"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","sourcesContent":["import React from \"react\";\r\n// We would like to use a modal (small window) to show details of a task.\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n  FormGroup,\r\n  Input,\r\n  Label,\r\n} from \"reactstrap\";\r\n\r\n// Let's create a component.\r\n// We are creating and exporting the CustomModal class. It is a class component.\r\n// It will be imported in our App.js.\r\nexport default class CustomModal extends React.Component {\r\n  // The constructor function will be called when the component gets initialized.\r\n  // It is also the place where you initialize the component's properties,\r\n  // aka props (that is, function arguments in React-speak).\r\n  constructor(props) {\r\n    // `super()` allows us to inherit from the parent component's constructor.\r\n    // That will allow our component to access all built-in React functions, etc.\r\n    super(props);\r\n    // React components have a built-in `state` object. The `state` object is where\r\n    // you store property values that belong to the component. When the state object\r\n    // changes, the component re-renders.\r\n    // The state object is initialized in the constructor.\r\n    // It can contain as many properties as you like.\r\n    // Here we define one property called activeItem.\r\n    // 'this' refers to the currently instantiated CustomModal.\r\n    this.state = {\r\n      activeItem: this.props.activeItem,\r\n    };\r\n  }\r\n\r\n  // Whenver we enter changes into our form, e.g., for the title of our task,\r\n  // we want the change to be immediately detected. This is what happens when\r\n  // the handleChange function is called below with onChange={this.handleChange}.\r\n  // handleChange takes an event argument, i.e., a change in title, descripton,\r\n  // or checkbox.\r\n  handleChange = (event) => {\r\n    // An event has a target, and event.target gives us the event's DOM element, e.g., see further below\r\n    // <input name=\"description\" placeholder=\"Enter Todo description\" type=\"text\" class=\"form-control\" value=\"My Task\">.\r\n    // To refer to the description we assign the variable name = \"description\" and value = \"My Task\".\r\n    let { name, value } = event.target;\r\n    if (event.target.type === \"checkbox\") {\r\n      value = event.target.checked;\r\n    }\r\n    // Below we have the spread operator three dots ... . It works as follows:\r\n    // var parts = ['two', 'three']; // [two\", \"three\"]\r\n    // var numbers = ['one', ...parts, 'four']; // [\"one\", \"two\", \"three\", \"four\"]\r\n    // ...this.state.activeItem spreads out the current task object, e.g.,\r\n    // {\"id\": 3, \"title\": \"My Task\", \"description\": \"Wash Dishes\", \"completed\": true}.\r\n    // [name]: value sets the name of the task to the new value the user entered\r\n    // (e.g., title to \"Another Task\" or description to \"Sweep floor\").\r\n    const activeItem = { ...this.state.activeItem, [name]: value };\r\n    // To change a value in the `state` object for rendering, use the `setState()`\r\n    // method (on the current CustomModal instance referred to with `this`).\r\n    // If you would not do so, the text shown to the user in the textbox, e.g.,\r\n    // for the title of the new task would not change.\r\n    this.setState({ activeItem });\r\n  };\r\n  // The `render()` method is the only required method in a class component.\r\n  // When called, it will render the page. You do not have to specifically\r\n  // call render() in your component. Rather, the stub code with the\r\n  // ReactDOM.render(...) in your index.js will do that for you.\r\n  // The following will render the modal for adding or editing a task.\r\n  render() {\r\n    // The modal has three properties: toggle, onSave, and activeItem.\r\n    // We have already defined activeItem above.\r\n    // See App.js on how toggle, onSave, and activeItem are being used.\r\n    const { toggle, onSave } = this.props;\r\n    return (\r\n      // isOpen={true} is a Boolean describing if the modal should be shown or not,\r\n      // i.e., in our case, what should happen if the modal is open.\r\n      // Open the modal on toggling/clicking. See the toggle function in App.js\r\n      // below.\r\n      <Modal isOpen={true} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\r\n        <ModalBody>\r\n          <Form>\r\n            <FormGroup>\r\n              <Label for=\"username\">Username</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"username\"\r\n                value={this.state.activeItem.title}\r\n                // \"this\" refers to the current event. If there is a change,\r\n                // it will be passed to the handleChange function above.\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter Username\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup>\r\n              <Label for=\"password\">Password</Label>\r\n              <Input\r\n                type=\"text\"\r\n                name=\"password\"\r\n                value={this.state.activeItem.description}\r\n                onChange={this.handleChange}\r\n                placeholder=\"Enter Password\"\r\n              />\r\n            </FormGroup>\r\n            <FormGroup check>\r\n              <Label for=\"completed\">\r\n                <Input\r\n                  type=\"checkbox\"\r\n                  name=\"completed\"\r\n                  checked={this.state.activeItem.completed}\r\n                  onChange={this.handleChange}\r\n                />\r\n                Completed\r\n              </Label>\r\n            </FormGroup>\r\n          </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n          <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\r\n            Save\r\n          </Button>\r\n        </ModalFooter>\r\n      </Modal>\r\n    );\r\n\r\n\r\n    \r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}