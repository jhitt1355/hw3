{"ast":null,"code":"var _jsxFileName = \"/Users/haydenleachman/Desktop/Wes/Comp333/hw3/ftest/src/components/Modal.js\";\n// frontend/src/components/Modal.js\nimport React from \"react\"; // We would like to use a modal (small window) to show details of a task.\n\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Form, FormGroup, Input, Label } from \"reactstrap\"; // We are creating and exporting the CustomModal class.\n// It will be imported in our App.js.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class CustomModal extends React.Component {\n  constructor(props) {\n    super(props); // The state object is initialized in the constructor.\n    // It can contain as many properties as you like.\n    // Here we define one property called activeItem.\n\n    this.handleChange = event => {\n      // An event has a target, thus, event.target gives us the event's DOM element, e.g.,\n      // <input name=\"description\" placeholder=\"Enter Todo description\" type=\"text\" class=\"form-control\" value=\"My Task\">.\n      // From that, we assign the variables name = \"description\" and value = \"My Task\".\n      let {\n        name,\n        value\n      } = event.target;\n\n      if (event.target.type === \"checkbox\") {\n        value = event.target.checked;\n      } // Recall the spread operator three dots ... , e.g.,\n      // var parts = ['two', 'three']; // [two\", \"three\"]\n      // var numbers = ['one', ...parts, 'four']; // [\"one\", \"two\", \"three\", \"four\"]\n      // ...this.state.activeItem spreads out the current task object, e.g.,\n      // {\"id\": 3, \"title\": \"My Task\", \"description\": \"Wash Dishes\", \"completed\": true}.\n      // [name]: value sets the name of the task to the new value the user entered\n      // (e.g., title to \"Another Task\" or description to \"Sweep floor\").\n\n\n      const activeItem = { ...this.state.activeItem,\n        [name]: value\n      }; // To change a value in the `state` object for rendering, use the `this.setState()`\n      // method. If you would not do so, the text shown to the user in the textbox, e.g.,\n      // for the title of the new task would not change.\n\n      this.setState({\n        activeItem\n      });\n    };\n\n    this.state = {\n      activeItem: this.props.activeItem\n    };\n  } // Whenver we enter changes into our form, e.g., for the title of our task,\n  // we want the change to be immediately detected. This is what happens when\n  // this function is called below with onChange={this.handleChange}.\n  // handleChange takes an event argument, i.e., a change in title, descripton,\n  // or checkbox.\n\n\n  // The `render()` method is the only required method in a class component.\n  // When called, it will render the page. You do not have to specifically\n  // call render() in your component. Rather, the stub code with the\n  // ReactDOM.render(...) in your index.js will do that for you.\n  // The following will render the modal for adding or editing a task.\n  render() {\n    // The modal has three properties: toggle, onSave, and activeItem.\n    // See App.js.\n    const {\n      toggle,\n      onSave\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: true,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \" Todo Item \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"title\",\n              children: \"Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 71,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"title\",\n              value: this.state.activeItem.title // \"this\" refers to the current event. If there is a change,\n              // it will be passed to the handleChange function above.\n              ,\n              onChange: this.handleChange,\n              placeholder: \"Enter Todo Title\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              for: \"description\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              type: \"text\",\n              name: \"description\",\n              value: this.state.activeItem.description,\n              onChange: this.handleChange,\n              placeholder: \"Enter Todo description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n            check: true,\n            children: /*#__PURE__*/_jsxDEV(Label, {\n              for: \"completed\",\n              children: [/*#__PURE__*/_jsxDEV(Input, {\n                type: \"checkbox\",\n                name: \"completed\",\n                checked: this.state.activeItem.completed,\n                onChange: this.handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 17\n              }, this), \"Completed\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          color: \"success\",\n          onClick: () => onSave(this.state.activeItem),\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/haydenleachman/Desktop/Wes/Comp333/hw3/ftest/src/components/Modal.js"],"names":["React","Button","Modal","ModalHeader","ModalBody","ModalFooter","Form","FormGroup","Input","Label","CustomModal","Component","constructor","props","handleChange","event","name","value","target","type","checked","activeItem","state","setState","render","toggle","onSave","title","description","completed"],"mappings":"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","sourcesContent":["// frontend/src/components/Modal.js\n\nimport React from \"react\";\n// We would like to use a modal (small window) to show details of a task.\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Input,\n  Label,\n} from \"reactstrap\";\n\n// We are creating and exporting the CustomModal class.\n// It will be imported in our App.js.\nexport default class CustomModal extends React.Component {\n  constructor(props) {\n    super(props);\n    // The state object is initialized in the constructor.\n    // It can contain as many properties as you like.\n    // Here we define one property called activeItem.\n    this.state = {\n      activeItem: this.props.activeItem,\n    };\n  }\n\n  // Whenver we enter changes into our form, e.g., for the title of our task,\n  // we want the change to be immediately detected. This is what happens when\n  // this function is called below with onChange={this.handleChange}.\n  // handleChange takes an event argument, i.e., a change in title, descripton,\n  // or checkbox.\n  handleChange = (event) => {\n    // An event has a target, thus, event.target gives us the event's DOM element, e.g.,\n    // <input name=\"description\" placeholder=\"Enter Todo description\" type=\"text\" class=\"form-control\" value=\"My Task\">.\n    // From that, we assign the variables name = \"description\" and value = \"My Task\".\n    let { name, value } = event.target;\n    if (event.target.type === \"checkbox\") {\n      value = event.target.checked;\n    }\n    // Recall the spread operator three dots ... , e.g.,\n    // var parts = ['two', 'three']; // [two\", \"three\"]\n    // var numbers = ['one', ...parts, 'four']; // [\"one\", \"two\", \"three\", \"four\"]\n    // ...this.state.activeItem spreads out the current task object, e.g.,\n    // {\"id\": 3, \"title\": \"My Task\", \"description\": \"Wash Dishes\", \"completed\": true}.\n    // [name]: value sets the name of the task to the new value the user entered\n    // (e.g., title to \"Another Task\" or description to \"Sweep floor\").\n    const activeItem = { ...this.state.activeItem, [name]: value };\n    // To change a value in the `state` object for rendering, use the `this.setState()`\n    // method. If you would not do so, the text shown to the user in the textbox, e.g.,\n    // for the title of the new task would not change.\n    this.setState({ activeItem });\n  };\n  // The `render()` method is the only required method in a class component.\n  // When called, it will render the page. You do not have to specifically\n  // call render() in your component. Rather, the stub code with the\n  // ReactDOM.render(...) in your index.js will do that for you.\n  // The following will render the modal for adding or editing a task.\n  render() {\n    // The modal has three properties: toggle, onSave, and activeItem.\n    // See App.js.\n    const { toggle, onSave } = this.props;\n    return (\n      <Modal isOpen={true} toggle={toggle}>\n        <ModalHeader toggle={toggle}> Todo Item </ModalHeader>\n        <ModalBody>\n          <Form>\n            <FormGroup>\n              <Label for=\"title\">Title</Label>\n              <Input\n                type=\"text\"\n                name=\"title\"\n                value={this.state.activeItem.title}\n                // \"this\" refers to the current event. If there is a change,\n                // it will be passed to the handleChange function above.\n                onChange={this.handleChange}\n                placeholder=\"Enter Todo Title\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label for=\"description\">Description</Label>\n              <Input\n                type=\"text\"\n                name=\"description\"\n                value={this.state.activeItem.description}\n                onChange={this.handleChange}\n                placeholder=\"Enter Todo description\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label for=\"completed\">\n                <Input\n                  type=\"checkbox\"\n                  name=\"completed\"\n                  checked={this.state.activeItem.completed}\n                  onChange={this.handleChange}\n                />\n                Completed\n              </Label>\n            </FormGroup>\n          </Form>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\" onClick={() => onSave(this.state.activeItem)}>\n            Save\n          </Button>\n        </ModalFooter>\n      </Modal>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}